/* BEGIN PRELUDE */
/* Array encoding */
domain Array {
  function $loc(a: Array, i: Int): Ref
  function $size(a: Array): Int
  function $loc_inv1(r: Ref): Array
  function $loc_inv2(r: Ref): Int
  axiom $all_diff_array { forall a: Array, i: Int :: {$loc(a, i)} $loc_inv1($loc(a, i)) == a && $loc_inv2($loc(a, i)) == i }
  axiom $size_nonneg { forall a: Array :: $size(a) >= 0 }
}
define $array_acc(a, t, p) forall j: Int :: 0 <= j && j < $size(a) ==> acc($loc(a, j).t, p)
define $array_untouched(a, t) forall j: Int :: 0 <= j && j < $size(a) ==> $loc(a, j).t == old($loc(a, j).t)
define $array_init(a, t, x) forall i : Int :: {$loc(a, i).t} 0 <= i && i < $size(a) ==> $loc(a, i).t == x
/* Tuple encoding */
/* Option encoding */
adt Option[T] {
  None()
  Some(some$0: T)
}
/* Text encoding */
function $concat(a: Int, b: Int): Int
/* Typed references */
/* END PRELUDE */

define $Perm($Self) (((true && acc(($Self).claimed,write)) && acc(($Self).count,write)))
define $Inv($Self) ((invariant_9($Self) && (invariant_10($Self) && invariant_11($Self))))
method __init__($Self: Ref)
    
    requires $Perm($Self)
    ensures $Perm($Self)
    ensures $Inv($Self)
    { 
      ($Self).claimed := false;
      ($Self).count := 0; 
    }
field claimed: Bool
field count: Int
define invariant_9($Self) ((((($Self).claimed && (!(-1 == -1))) && (-42 == -42)) || true))
define invariant_10($Self) ((($Self).count > 0))
define invariant_11($Self) (((!($Self).claimed) ==> (($Self).count == 0)))
method claim($Self: Ref)
    
    requires $Perm($Self)
    requires (($Self).count >= 0)
    requires $Inv($Self)
    ensures $Perm($Self)
    ensures (($Self).count >= 0)
    ensures $Inv($Self)
    { 
      assume (($Self).claimed ==> (($Self).count > 0));
      label $Ret; 
    }
method loops($Self: Ref)
    
    requires $Perm($Self)
    requires $Inv($Self)
    ensures $Perm($Self)
    ensures $Inv($Self)
    { var i: Int
      i := 0;
      while ((i > 0))
         invariant $Perm($Self)
         { 
           i := (i + 1); 
         };
      label $Ret; 
    }
