/* BEGIN PRELUDE */
/* Array encoding */
domain Array {
  function $loc(a: Array, i: Int): Ref
  function $size(a: Array): Int
  function $loc_inv1(r: Ref): Array
  function $loc_inv2(r: Ref): Int
  axiom $all_diff_array { forall a: Array, i: Int :: {$loc(a, i)} $loc_inv1($loc(a, i)) == a && $loc_inv2($loc(a, i)) == i }
  axiom $size_nonneg { forall a: Array :: $size(a) >= 0 }
}
define $array_acc(a, t, p) forall j: Int :: 0 <= j && j < $size(a) ==> acc($loc(a, j).t, p)
define $array_untouched(a, t) forall j: Int :: 0 <= j && j < $size(a) ==> $loc(a, j).t == old($loc(a, j).t)
define $array_init(a, t, x) forall i : Int :: {$loc(a, i).t} 0 <= i && i < $size(a) ==> $loc(a, i).t == x
/* Tuple encoding */
adt Tuple$2 [T0, T1] { Tup$2(tup$2$0 : T0, tup$2$1 : T1) }
/* Option encoding */
adt Option[T] {
  None()
  Some(some$0: T)
}
/* Text encoding */
function $concat(a: Int, b: Int): Int
/* Typed references */
field $int: Int
/* END PRELUDE */

define $Perm($Self) (((true && acc(($Self).fld1,write)) && acc(($Self).fld2,write)))
define $Inv($Self) (true)
method __init__($Self: Ref)
    
    requires $Perm($Self)
    ensures $Perm($Self)
    ensures $Inv($Self)
    { 
      ($Self).fld1 := 4;
      ($Self).fld2 := 4; 
    }
field fld1: Int
field fld2: Int
method concat_text($Self: Ref)
    
    requires $Perm($Self)
    ensures $Perm($Self)
    { var x: Int
      var y: Int
      var z: Int
      x := 0;
      y := 1;
      z := $concat(x, y);
      assert (z == $concat(0, 1));
      label $Ret; 
    }
method array_text($Self: Ref)
    
    requires $Perm($Self)
    ensures $Perm($Self)
    { var arr: Array
      inhale $array_acc(arr, $int, write);
      inhale ($size(arr) == 2);
      ($loc(arr, 0)).$int := 2;
      ($loc(arr, 1)).$int := 2;
      ($loc(arr, 0)).$int := 0;
      ($loc(arr, 1)).$int := 1;
      assert ((($loc(arr, 0)).$int == 0) && (($loc(arr, 1)).$int == 1));
      label $Ret; 
    }
method tuple_text($Self: Ref)
    
    requires $Perm($Self)
    ensures $Perm($Self)
    { var tup: Tuple$2[Int, Int]
      tup := Tup$2(0, 1);
      assert (((tup).tup$2$0 == 0) && ((tup).tup$2$1 == 1));
      label $Ret; 
    }
method get_text($Self: Ref)
     returns ($Res: Int)
    requires $Perm($Self)
    ensures $Perm($Self)
    ensures ($Res == 0)
    { 
      $Res := 0;
      goto $Ret;
      label $Ret; 
    }
method call_text($Self: Ref)
    
    requires $Perm($Self)
    ensures $Perm($Self)
    { var res: Int
      res := get_text($Self);
      assert (res == 0);
      label $Ret; 
    }
method text_arg($Self: Ref, txt: Int)
     returns ($Res: Int)
    requires $Perm($Self)
    requires (txt == 3)
    ensures $Perm($Self)
    ensures ($Res == $concat(3, 4))
    { 
      $Res := $concat(txt, 4);
      goto $Ret;
      label $Ret; 
    }
method pass_text($Self: Ref)
    
    requires $Perm($Self)
    ensures $Perm($Self)
    { var res: Int
      res := text_arg($Self, 3);
      assert (res == $concat(3, 4));
      label $Ret; 
    }
method match_on_text($Self: Ref)
     returns ($Res: Int)
    requires $Perm($Self)
    ensures $Perm($Self)
    ensures ($Res == 42)
    { var txt: Int
      txt := get_text($Self);
      if ((txt == 0))
         { 
           $Res := 42;
           goto $Ret; 
         }else
         { 
           if ((txt == 1))
              { 
                $Res := 100;
                goto $Ret; 
              }else
              { 
                if (true)
                   { 
                     $Res := 0;
                     goto $Ret; 
                   }; 
              }; 
         };
      label $Ret; 
    }
