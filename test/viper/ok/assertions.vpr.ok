/* BEGIN PRELUDE */
/* Array encoding */
domain Array {
  function $loc(a: Array, i: Int): Ref
  function $size(a: Array): Int
  function $loc_inv1(r: Ref): Array
  function $loc_inv2(r: Ref): Int
  axiom $all_diff_array { forall a: Array, i: Int :: {$loc(a, i)} $loc_inv1($loc(a, i)) == a && $loc_inv2($loc(a, i)) == i }
  axiom $size_nonneg { forall a: Array :: $size(a) >= 0 }
}
define $array_acc(a, t, p) forall j: Int :: 0 <= j && j < $size(a) ==> acc($loc(a, j).t, p)
define $array_untouched(a, t) forall j: Int :: 0 <= j && j < $size(a) ==> $loc(a, j).t == old($loc(a, j).t)
define $array_init(a, t, x) forall i : Int :: 0 <= i && i < $size(a) ==> $loc(a, i).t == x
/* Tuple encoding */
domain Tuple {
  function $prj(a: Tuple, i: Int): Ref
  function $prj_inv1(r: Ref): Tuple
  function $prj_inv2(r: Ref): Int
  axiom $all_diff_tuple { forall a: Tuple, i: Int :: {$prj(a, i)} $prj_inv1($prj(a, i)) == a && $prj_inv2($prj(a, i)) == i }
}
/* Option encoding */
adt Option[T] {
  None()
  Some(some$0: T)
}
/* Typed references */
field $int: Int
field $bool: Bool
field $ref: Ref
field $array: Array
field $tuple: Tuple
field $option_int: Option[Int]
field $option_bool: Option[Bool]
field $option_array: Option[Array]
field $option_tuple: Option[Tuple]
/* END PRELUDE */

field $message_async: Int
define $Perm($Self) ((((true && acc(($Self).u,write)) && acc(($Self).v,write)) && 
  acc(($Self).$message_async,write)))
define $Inv($Self) ((invariant_11($Self) && (((0 <= ($Self).$message_async) && (
  ($Self).$message_async <= 1)) && ((($Self).$message_async == 1) ==> true))))
method __init__($Self: Ref)
    
    requires $Perm($Self)
    ensures $Perm($Self)
    ensures $Inv($Self)
    { 
      ($Self).u := false;
      ($Self).v := 0;
      ($Self).$message_async := 0; 
    }
field u: Bool
field v: Int
define invariant_11($Self) (($Self).u)
method claim($Self: Ref)
    
    requires $Perm($Self)
    requires (($Self).v >= 0)
    requires $Inv($Self)
    ensures $Perm($Self)
    ensures (($Self).v >= 0)
    ensures $Inv($Self)
    { 
      assert (($Self).u ==> (($Self).v > 0));
      assume (($Self).u ==> (($Self).v > 0));
      ($Self).$message_async := (($Self).$message_async + 1);
      exhale ($Perm($Self) && $Inv($Self));
      { 
         inhale ($Perm($Self) && ($Inv($Self) && (($Self).$message_async > 0)));
         ($Self).$message_async := (($Self).$message_async - 1);
         { 
             
          };
         exhale ($Perm($Self) && $Inv($Self)); 
       };
      inhale ($Perm($Self) && $Inv($Self));
      label $Ret; 
    }
