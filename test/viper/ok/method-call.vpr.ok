/* BEGIN PRELUDE */
/* Array encoding */
domain Array {
  function $loc(a: Array, i: Int): Ref
  function $size(a: Array): Int
  function $loc_inv1(r: Ref): Array
  function $loc_inv2(r: Ref): Int
  axiom $all_diff_array { forall a: Array, i: Int :: {$loc(a, i)} $loc_inv1($loc(a, i)) == a && $loc_inv2($loc(a, i)) == i }
  axiom $size_nonneg { forall a: Array :: $size(a) >= 0 }
}
define $array_acc(a, t, p) forall j: Int :: 0 <= j && j < $size(a) ==> acc($loc(a, j).t, p)
define $array_untouched(a, t) forall j: Int :: 0 <= j && j < $size(a) ==> $loc(a, j).t == old($loc(a, j).t)
define $array_init(a, t, x) forall i : Int :: {$loc(a, i).t} 0 <= i && i < $size(a) ==> $loc(a, i).t == x
/* Tuple encoding */
/* Option encoding */
adt Option[T] {
  None()
  Some(some$0: T)
}
/* Text encoding */
function $concat(a: Int, b: Int): Int
/* Typed references */
/* END PRELUDE */

define $Perm($Self) ((true && acc(($Self).boolFld,write)))
define $Inv($Self) (true)
method __init__($Self: Ref)
    
    requires $Perm($Self)
    ensures $Perm($Self)
    ensures $Inv($Self)
    { 
      ($Self).boolFld := false; 
    }
method ignoreBool($Self: Ref, _b: Bool)
    
    requires $Perm($Self)
    ensures $Perm($Self)
    { 
      label $Ret; 
    }
method idInt($Self: Ref, n: Int)
     returns ($Res: Int)
    requires $Perm($Self)
    ensures $Perm($Self)
    { 
      $Res := n;
      goto $Ret;
      label $Ret; 
    }
method idBool($Self: Ref, b: Bool)
     returns ($Res: Bool)
    requires $Perm($Self)
    ensures $Perm($Self)
    { 
      $Res := b;
      goto $Ret;
      label $Ret; 
    }
method ifThenElse($Self: Ref, b: Bool, tru: Int, fls: Int)
     returns ($Res: Int)
    requires $Perm($Self)
    requires $Inv($Self)
    ensures $Perm($Self)
    ensures $Inv($Self)
    { var c1: Bool
      var c2: Bool
      ignoreBool($Self, b);
      c1 := idBool($Self, b);
      c2 := idBool($Self, b);
      c2 := idBool($Self, c2);
      if ((c1 && c2))
         { 
           $Res := idInt($Self, tru);
           goto $Ret; 
         };
      $Res := idInt($Self, fls);
      goto $Ret;
      label $Ret; 
    }
field boolFld: Bool
method testBoolFld($Self: Ref)
     returns ($Res: Bool)
    requires $Perm($Self)
    requires $Inv($Self)
    ensures $Perm($Self)
    ensures $Inv($Self)
    { var $t_boolFld: Bool
      ($Self).boolFld := (!($Self).boolFld);
      $t_boolFld := idBool($Self, ($Self).boolFld);
      ($Self).boolFld := $t_boolFld;
      $Res := ($Self).boolFld;
      goto $Ret;
      label $Ret; 
    }
