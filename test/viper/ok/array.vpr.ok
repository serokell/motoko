/* BEGIN PRELUDE */
domain Array {
  function $loc(a: Array, i: Int): Ref
  function $size(a: Array): Int
  function $first(r: Ref): Array
  function $second(r: Ref): Int
  axiom $all_diff { forall a: Array, i: Int :: {$loc(a, i)} $first($loc(a, i)) == a && $second($loc(a, i)) == i }
  axiom $size_nonneg { forall a: Array :: $size(a) >= 0 }
}
define $array_acc_mut(a, t) forall j: Int :: 0 <= j && j < $size(a) ==> acc($loc(a, j).t)
define $array_acc(a, t) forall j: Int :: 0 <= j && j < $size(a) ==> acc($loc(a, j).t, 1/2)
define $untouched(a, t) forall j: Int :: 0 <= j && j < $size(a) ==> $loc(a, j).t == old($loc(a, j).t)
field $int: Int
field $bool: Bool
field $ref: Ref
field $array: Array
/* END PRELUDE */

define $Perm($Self) ((((true && (acc(($Self).arr,write) && ($array_acc_mut(
                                                            ($Self).arr,
                                                            $int) && (
  $size(($Self).arr) == 2)))) && acc(($Self).f,write)) && acc(($Self).count,write)))
define $Inv($Self) (true)
method __init__($Self: Ref)
    
    requires $Perm($Self)
    ensures $Perm($Self)
    ensures $Inv($Self)
    { 
      inhale $array_acc_mut(($Self).arr, $int)
      inhale ($size(($Self).arr) == 2)
      ($loc(($Self).arr, 0)).$int := 1
      ($loc(($Self).arr, 1)).$int := 2
      exhale $array_acc_mut(($Self).arr, $int)
      inhale $array_acc_mut(($Self).arr, $int)
      ($Self).f := 2
      ($Self).count := 42 
    }
field arr: Array
field f: Int
field count: Int
method foo($Self: Ref)
     returns ($Res: Int)
    requires $Perm($Self)
    requires $Inv($Self)
    ensures $Perm($Self)
    ensures $Inv($Self)
    { var vi_a: Array
      var vm_a: Array
      var li_a: Array
      var lm_a: Array
      var vi_a_2: Array
      var vm_a_2: Array
      inhale $array_acc_mut(vi_a, $int)
      inhale ($size(vi_a) == 1)
      ($loc(vi_a, 0)).$int := 1
      exhale $array_acc_mut(vi_a, $int)
      inhale $array_acc(vi_a, $int)
      inhale $array_acc_mut(vm_a, $int)
      inhale ($size(vm_a) == 2)
      ($loc(vm_a, 0)).$int := 1
      ($loc(vm_a, 1)).$int := 2
      exhale $array_acc_mut(vm_a, $int)
      inhale $array_acc_mut(vm_a, $int)
      inhale $array_acc_mut(li_a, $bool)
      inhale ($size(li_a) == 1)
      ($loc(li_a, 0)).$bool := false
      exhale $array_acc_mut(li_a, $bool)
      inhale $array_acc(li_a, $bool)
      inhale $array_acc_mut(lm_a, $bool)
      inhale ($size(lm_a) == 1)
      ($loc(lm_a, 0)).$bool := false
      exhale $array_acc_mut(lm_a, $bool)
      inhale $array_acc_mut(lm_a, $bool)
      inhale $array_acc_mut(vi_a_2, $int)
      inhale ($size(vi_a_2) == 2)
      ($loc(vi_a_2, 0)).$int := 1
      ($loc(vi_a_2, 1)).$int := 2
      exhale $array_acc_mut(vi_a_2, $int)
      inhale $array_acc(vi_a_2, $int)
      vi_a := vi_a_2
      inhale $array_acc_mut(vm_a_2, $int)
      inhale ($size(vm_a_2) == 1)
      ($loc(vm_a_2, 0)).$int := 42
      exhale $array_acc_mut(vm_a_2, $int)
      inhale $array_acc_mut(vm_a_2, $int)
      vm_a := vm_a_2
      $Res := 42
      goto $Ret
      label $Ret 
    }
method baz1($Self: Ref)
     returns ($Res: Array)
    requires $Perm($Self)
    requires $Inv($Self)
    ensures $Perm($Self)
    ensures $array_acc($Res, $int)
    ensures $Inv($Self)
    { var r: Array
      inhale $array_acc_mut(r, $int)
      inhale ($size(r) == 2)
      ($loc(r, 0)).$int := 1
      ($loc(r, 1)).$int := 2
      exhale $array_acc_mut(r, $int)
      inhale $array_acc(r, $int)
      $Res := r
      goto $Ret
      label $Ret 
    }
method baz2($Self: Ref)
     returns ($Res: Array)
    requires $Perm($Self)
    ensures $Perm($Self)
    ensures $array_acc_mut($Res, $int)
    { var r: Array
      inhale $array_acc_mut(r, $int)
      inhale ($size(r) == 2)
      ($loc(r, 0)).$int := 1
      ($loc(r, 1)).$int := 2
      exhale $array_acc_mut(r, $int)
      inhale $array_acc_mut(r, $int)
      $Res := r
      goto $Ret
      label $Ret 
    }
method bar($Self: Ref)
     returns ($Res: Int)
    requires $Perm($Self)
    ensures $Perm($Self)
    { var x: Array
      var y: Array
      var z: Int
      inhale $array_acc_mut(x, $int)
      inhale ($size(x) == 2)
      ($loc(x, 0)).$int := 42
      ($loc(x, 1)).$int := 24
      exhale $array_acc_mut(x, $int)
      inhale $array_acc(x, $int)
      inhale $array_acc_mut(y, $bool)
      inhale ($size(y) == 1)
      ($loc(y, 0)).$bool := false
      exhale $array_acc_mut(y, $bool)
      inhale $array_acc_mut(y, $bool)
      ($loc(y, 0)).$bool := true
      z := (($loc(x, 0)).$int + ($loc(x, 1)).$int)
      $Res := ($loc(x, 1)).$int
      goto $Ret
      label $Ret 
    }
method bar2($Self: Ref, x: Array)
     returns ($Res: Int)
    requires $Perm($Self)
    requires $array_acc(x, $int)
    requires ($size(x) == 2)
    requires $Inv($Self)
    ensures $Perm($Self)
    ensures $array_acc(x, $int)
    ensures $Inv($Self)
    { var y: Array
      var z: Int
      inhale $array_acc_mut(y, $bool)
      inhale ($size(y) == 1)
      ($loc(y, 0)).$bool := false
      exhale $array_acc_mut(y, $bool)
      inhale $array_acc_mut(y, $bool)
      ($loc(y, 0)).$bool := true
      z := (($loc(x, 0)).$int + ($loc(x, 1)).$int)
      $Res := ($loc(x, 1)).$int
      goto $Ret
      label $Ret 
    }
method inc($Self: Ref)
     returns ($Res: Int)
    requires $Perm($Self)
    requires $Inv($Self)
    ensures $Perm($Self)
    ensures $Inv($Self)
    { 
      ($loc(($Self).arr, 0)).$int := (($loc(($Self).arr, 0)).$int + 1)
      $Res := ($loc(($Self).arr, 0)).$int
      goto $Ret
      label $Ret 
    }
method len($Self: Ref)
     returns ($Res: Int)
    requires $Perm($Self)
    requires $Inv($Self)
    ensures $Perm($Self)
    ensures $Inv($Self)
    { 
      $Res := $size(($Self).arr)
      goto $Ret
      label $Ret 
    }
