/* BEGIN PRELUDE */
/* Array encoding */
domain Array {
  function $loc(a: Array, i: Int): Ref
  function $size(a: Array): Int
  function $loc_inv1(r: Ref): Array
  function $loc_inv2(r: Ref): Int
  axiom $all_diff_array { forall a: Array, i: Int :: {$loc(a, i)} $loc_inv1($loc(a, i)) == a && $loc_inv2($loc(a, i)) == i }
  axiom $size_nonneg { forall a: Array :: $size(a) >= 0 }
}
define $array_acc(a, t, p) forall j: Int :: 0 <= j && j < $size(a) ==> acc($loc(a, j).t, p)
define $array_untouched(a, t) forall j: Int :: 0 <= j && j < $size(a) ==> $loc(a, j).t == old($loc(a, j).t)
define $array_init(a, t, x) forall i : Int :: {$loc(a, i).t} 0 <= i && i < $size(a) ==> $loc(a, i).t == x
/* Tuple encoding */
/* Option encoding */
adt Option[T] {
  None()
  Some(some$0: T)
}
/* Text encoding */
function $concat(a: Int, b: Int): Int
/* Typed references */
/* END PRELUDE */

define $Perm($Self) (true)
define $Inv($Self) (true)
method __init__($Self: Ref)
    
    requires $Perm($Self)
    ensures $Perm($Self)
    ensures $Inv($Self)
    { 
       
    }
method numLits($Self: Ref)
    
    requires $Perm($Self)
    ensures $Perm($Self)
    { var i: Int
      var n: Int
      i := 42;
      if ((i == 42))
         { 
            
         }else
         { 
           if ((i == 1000))
              { 
                 
              }else
              { 
                if (true)
                   { 
                      
                   }; 
              }; 
         };
      n := 42;
      if ((n == 42))
         { 
            
         }else
         { 
           if ((n == 1000))
              { 
                 
              }else
              { 
                if (true)
                   { 
                      
                   }; 
              }; 
         };
      label $Ret; 
    }
method boolLits($Self: Ref)
    
    requires $Perm($Self)
    ensures $Perm($Self)
    { var b: Bool
      b := false;
      if ((b == true))
         { 
            
         }else
         { 
           if ((b == false))
              { 
                 
              }; 
         };
      label $Ret; 
    }
