(library
  (name mo_frontend)
  (libraries menhirLib lib lang_utils mo_config mo_def mo_types mo_values wasm_exts ocaml-recovery-parser.menhirRecoveryLib)
  (modules (:standard \ test_recovery test_field_srcs))
  (instrumentation (backend bisect_ppx --bisect-silent yes))
)

(menhir
  (modules parser assertions)
  (merge_into parser)
  (flags --table --inspection -v --strict --cmly)
  (infer true)
)

(rule
  (targets recover_parser.ml)
  (deps parser.cmly)
  (action
    (with-stdout-to recover_parser.ml
      (run ocaml-recovery-parser.menhir-recovery-generator parser.cmly)
    )
  )
)

(ocamllex source_lexer)

(library
  (name test_recovery)
  (inline_tests)
  (modules test_recovery)
  (libraries mo_frontend menhirLib lib lang_utils mo_config mo_def mo_types mo_values wasm_exts ocaml-recovery-parser.menhirRecoveryLib )
  (flags (:standard -w -40))
  (preprocess (pps ppx_inline_test ppx_expect)))

(library
  (name test_field_srcs)
  (inline_tests)
  (modules test_field_srcs)
  (libraries mo_frontend lib lang_utils mo_config mo_def mo_types mo_values wasm_exts)
  (flags (:standard -w -40))
  (preprocess (pps ppx_inline_test ppx_expect)))
